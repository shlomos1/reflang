// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!! This file is auto-generated by Reflang. !!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#include "args.gen.hpp"

#include <algorithm>
#include <cassert>
#include <stdexcept>
#include <type_traits>

namespace reflang
{


int Function<void(*)(int), Func>::GetParameterCount() const
{
	return 1;
}

Parameter Function<void(*)(int), Func>::GetReturnType() const
{
	Parameter result;
	result.Type = "void";
	return result;
}

Parameter Function<void(*)(int), Func>::GetParameter(int i) const
{
	if (i < 0 || i >= GetParameterCount())
	{
		throw Exception("Argument out of range.");
	}

	Parameter result;

	switch (i)
	{
	case 0:
		result.Name = "a";
		result.Type = "int";
		break;
	default:
		break;
	}

	return result;
}

static const std::string Func_name = "Func";

const std::string& Function<void(*)(int), Func>::GetName() const
{
	return Func_name;
}

Object Function<void(*)(int), Func>::Invoke(const std::vector<Object>& args)
{
	if (args.size() != GetParameterCount())
	{
		throw Exception("Invoke(): bad argument count.");
	}

	Func(args[0].GetT<std::decay_t<int>>());
	return Object();
}

namespace
{
	// Object to auto-register Func.
	struct Func_registrar
	{
		Func_registrar()
		{
			::reflang::registry::internal::Register(
					std::make_unique<Function<void(*)(int), Func>>());
		}
	} Func_instance;
}



int Function<bool(*)(int, float), Func2>::GetParameterCount() const
{
	return 2;
}

Parameter Function<bool(*)(int, float), Func2>::GetReturnType() const
{
	Parameter result;
	result.Type = "bool";
	return result;
}

Parameter Function<bool(*)(int, float), Func2>::GetParameter(int i) const
{
	if (i < 0 || i >= GetParameterCount())
	{
		throw Exception("Argument out of range.");
	}

	Parameter result;

	switch (i)
	{
	case 0:
		result.Name = "a";
		result.Type = "int";
		break;
	case 1:
		result.Name = "b";
		result.Type = "float";
		break;
	default:
		break;
	}

	return result;
}

static const std::string Func2_name = "Func2";

const std::string& Function<bool(*)(int, float), Func2>::GetName() const
{
	return Func2_name;
}

Object Function<bool(*)(int, float), Func2>::Invoke(const std::vector<Object>& args)
{
	if (args.size() != GetParameterCount())
	{
		throw Exception("Invoke(): bad argument count.");
	}

	return Object(Func2(args[0].GetT<std::decay_t<int>>(), args[1].GetT<std::decay_t<float>>()));
}

namespace
{
	// Object to auto-register Func2.
	struct Func2_registrar
	{
		Func2_registrar()
		{
			::reflang::registry::internal::Register(
					std::make_unique<Function<bool(*)(int, float), Func2>>());
		}
	} Func2_instance;
}



int Function<bool(*)(const int &), Func3>::GetParameterCount() const
{
	return 1;
}

Parameter Function<bool(*)(const int &), Func3>::GetReturnType() const
{
	Parameter result;
	result.Type = "bool";
	return result;
}

Parameter Function<bool(*)(const int &), Func3>::GetParameter(int i) const
{
	if (i < 0 || i >= GetParameterCount())
	{
		throw Exception("Argument out of range.");
	}

	Parameter result;

	switch (i)
	{
	case 0:
		result.Name = "a";
		result.Type = "const int &";
		break;
	default:
		break;
	}

	return result;
}

static const std::string Func3_name = "Func3";

const std::string& Function<bool(*)(const int &), Func3>::GetName() const
{
	return Func3_name;
}

Object Function<bool(*)(const int &), Func3>::Invoke(const std::vector<Object>& args)
{
	if (args.size() != GetParameterCount())
	{
		throw Exception("Invoke(): bad argument count.");
	}

	return Object(Func3(args[0].GetT<std::decay_t<const int &>>()));
}

namespace
{
	// Object to auto-register Func3.
	struct Func3_registrar
	{
		Func3_registrar()
		{
			::reflang::registry::internal::Register(
					std::make_unique<Function<bool(*)(const int &), Func3>>());
		}
	} Func3_instance;
}


}  // namespace reflang
