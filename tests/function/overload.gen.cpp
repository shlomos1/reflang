// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!! This file is auto-generated by Reflang. !!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#include "overload.gen.hpp"

#include <algorithm>
#include <cassert>
#include <stdexcept>
#include <type_traits>

namespace reflang
{


int Function<void(*)(), Func>::GetParameterCount() const
{
	return 0;
}

Parameter Function<void(*)(), Func>::GetReturnType() const
{
	Parameter result;
	result.Type = "void";
	return result;
}

Parameter Function<void(*)(), Func>::GetParameter(int i) const
{
	if (i < 0 || i >= GetParameterCount())
	{
		throw Exception("Argument out of range.");
	}

	Parameter result;
	return result;
}

static const std::string Func_name = "Func";

const std::string& Function<void(*)(), Func>::GetName() const
{
	return Func_name;
}

Object Function<void(*)(), Func>::Invoke(const std::vector<Object>& args)
{
	if (args.size() != GetParameterCount())
	{
		throw Exception("Invoke(): bad argument count.");
	}

	Func();
	return Object();
}

namespace
{
	// Object to auto-register Func.
	struct Func_registrar
	{
		Func_registrar()
		{
			::reflang::registry::internal::Register(
					std::make_unique<Function<void(*)(), Func>>());
		}
	} Func_instance;
}



int Function<void(*)(int), Func>::GetParameterCount() const
{
	return 1;
}

Parameter Function<void(*)(int), Func>::GetReturnType() const
{
	Parameter result;
	result.Type = "void";
	return result;
}

Parameter Function<void(*)(int), Func>::GetParameter(int i) const
{
	if (i < 0 || i >= GetParameterCount())
	{
		throw Exception("Argument out of range.");
	}

	Parameter result;

	switch (i)
	{
	case 0:
		result.Name = "i";
		result.Type = "int";
		break;
	default:
		break;
	}

	return result;
}

static const std::string Func_1_name = "Func";

const std::string& Function<void(*)(int), Func>::GetName() const
{
	return Func_1_name;
}

Object Function<void(*)(int), Func>::Invoke(const std::vector<Object>& args)
{
	if (args.size() != GetParameterCount())
	{
		throw Exception("Invoke(): bad argument count.");
	}

	Func(args[0].GetT<std::decay_t<int>>());
	return Object();
}

namespace
{
	// Object to auto-register Func.
	struct Func_1_registrar
	{
		Func_1_registrar()
		{
			::reflang::registry::internal::Register(
					std::make_unique<Function<void(*)(int), Func>>());
		}
	} Func_1_instance;
}



int Function<void(*)(float), Func>::GetParameterCount() const
{
	return 1;
}

Parameter Function<void(*)(float), Func>::GetReturnType() const
{
	Parameter result;
	result.Type = "void";
	return result;
}

Parameter Function<void(*)(float), Func>::GetParameter(int i) const
{
	if (i < 0 || i >= GetParameterCount())
	{
		throw Exception("Argument out of range.");
	}

	Parameter result;

	switch (i)
	{
	case 0:
		result.Name = "f";
		result.Type = "float";
		break;
	default:
		break;
	}

	return result;
}

static const std::string Func_2_name = "Func";

const std::string& Function<void(*)(float), Func>::GetName() const
{
	return Func_2_name;
}

Object Function<void(*)(float), Func>::Invoke(const std::vector<Object>& args)
{
	if (args.size() != GetParameterCount())
	{
		throw Exception("Invoke(): bad argument count.");
	}

	Func(args[0].GetT<std::decay_t<float>>());
	return Object();
}

namespace
{
	// Object to auto-register Func.
	struct Func_2_registrar
	{
		Func_2_registrar()
		{
			::reflang::registry::internal::Register(
					std::make_unique<Function<void(*)(float), Func>>());
		}
	} Func_2_instance;
}



int Function<bool(*)(const char &), Func>::GetParameterCount() const
{
	return 1;
}

Parameter Function<bool(*)(const char &), Func>::GetReturnType() const
{
	Parameter result;
	result.Type = "bool";
	return result;
}

Parameter Function<bool(*)(const char &), Func>::GetParameter(int i) const
{
	if (i < 0 || i >= GetParameterCount())
	{
		throw Exception("Argument out of range.");
	}

	Parameter result;

	switch (i)
	{
	case 0:
		result.Name = "c";
		result.Type = "const char &";
		break;
	default:
		break;
	}

	return result;
}

static const std::string Func_3_name = "Func";

const std::string& Function<bool(*)(const char &), Func>::GetName() const
{
	return Func_3_name;
}

Object Function<bool(*)(const char &), Func>::Invoke(const std::vector<Object>& args)
{
	if (args.size() != GetParameterCount())
	{
		throw Exception("Invoke(): bad argument count.");
	}

	return Object(Func(args[0].GetT<std::decay_t<const char &>>()));
}

namespace
{
	// Object to auto-register Func.
	struct Func_3_registrar
	{
		Func_3_registrar()
		{
			::reflang::registry::internal::Register(
					std::make_unique<Function<bool(*)(const char &), Func>>());
		}
	} Func_3_instance;
}


}  // namespace reflang
