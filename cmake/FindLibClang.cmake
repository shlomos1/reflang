if (NOT CLANG_ROOT)
  set(CLANG_ROOT $ENV{CLANG_ROOT})
endif ()

if ("${CMAKE_SYSTEM_NAME}" STREQUAL "Windows")
  if(CLANG_ROOT)
    set(LLVM_CONFIG true)
    set(CLANG_INCLUDEDIR "${CLANG_ROOT}/include")
    set(CLANG_LIBDIR "${CLANG_ROOT}/lib")
  else()
    set(LLVM_CONFIG true)
    set(CLANG_INCLUDEDIR "C:/Program Files/LLVM/include")
    set(CLANG_LIBDIR "C:/Program Files/LLVM/lib")
  endif()
endif()

if (NOT LLVM_CONFIG)
  set(LLVM_CONFIG $ENV{LLVM_CONFIG})
  if (NOT LLVM_CONFIG)
    set(llvm_config_names llvm-config)
    foreach(minor RANGE 12 1)
      list(APPEND llvm_config_names "llvm-config${minor}")
    endforeach ()
    find_program(LLVM_CONFIG NAMES ${llvm_config_names})
  endif ()
endif ()

if (LLVM_CONFIG)
  message(STATUS "llvm-config found at: ${LLVM_CONFIG}")
else ()
  message(FATAL_ERROR "Could NOT find llvm-config executable.")
endif ()

if (NOT EXISTS ${CLANG_INCLUDEDIR})
  execute_process(COMMAND ${LLVM_CONFIG} --includedir OUTPUT_VARIABLE CLANG_INCLUDEDIR OUTPUT_STRIP_TRAILING_WHITESPACE)
  if (NOT EXISTS ${CLANG_INCLUDEDIR})
    message(FATAL_ERROR "Could NOT find clang includedir. You can fix this by setting CLANG_INCLUDEDIR in your shell or as a cmake variable.")
  endif ()
endif ()

if (NOT EXISTS ${CLANG_LIBDIR})
  execute_process(COMMAND ${LLVM_CONFIG} --libdir OUTPUT_VARIABLE CLANG_LIBDIR OUTPUT_STRIP_TRAILING_WHITESPACE)
  if (NOT EXISTS ${CLANG_LIBDIR})
    message(FATAL_ERROR "Could NOT find clang libdir. You can fix this by setting CLANG_LIBDIR in your shell or as a cmake variable.")
  endif ()
endif ()

function(imported_lib libname libfile)
  add_library(${libname} UNKNOWN IMPORTED)
  set_target_properties(${libname} PROPERTIES
    IMPORTED_LINK_INTERFACE_LANGUAGES "CXX"
    IMPORTED_LOCATION "${libfile}"
  )
endfunction()

function(imported_lib_from_name file libname)
  get_filename_component(filename "${file}" NAME_WE)
  imported_lib("clang::${filename}" ${file})
  message("created lib alias: clang::${filename}")
  set("${libname}" clang::${filename} PARENT_SCOPE)
endfunction()

if (NOT CLANG_LIBS)
  if ("${CMAKE_SYSTEM_NAME}" STREQUAL "Windows")
    file(GLOB CLANG_LIB_PATHS "${CLANG_LIBDIR}/*.lib")
    list(REMOVE_ITEM CLANG_LIB_PATHS "${CLANG_LIBDIR}/LLVM-C.lib")
    foreach(file ${CLANG_LIB_PATHS})
      imported_lib_from_name("${file}" LIBNAME)
      set(CLANG_LIBS ${CLANG_LIBS} ${LIBNAME})
    endforeach()
  else()
    find_library(CLANG_LIBCLANG NAMES clang libclang PATHS ${CLANG_ROOT}/lib ${CLANG_LIBDIR} NO_DEFAULT_PATH)
    set(CLANG_LIBS "${CLANG_LIBCLANG}")
  endif()
endif ()

add_library(clang INTERFACE IMPORTED)
foreach(lib ${CLANG_LIBS})
  target_link_libraries(clang INTERFACE ${lib})
endforeach()

if ("${CMAKE_SYSTEM_NAME}" STREQUAL "Windows")
  target_link_libraries(clang INTERFACE version.lib)
endif()

target_include_directories(clang INTERFACE ${CLANG_INCLUDEDIR})
target_compile_definitions(clang INTERFACE CINDEX_NO_EXPORTS)